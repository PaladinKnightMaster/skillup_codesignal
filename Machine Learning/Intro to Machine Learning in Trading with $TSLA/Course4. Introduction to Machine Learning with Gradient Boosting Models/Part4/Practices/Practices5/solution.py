# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler
# from sklearn.ensemble import GradientBoostingRegressor
# import matplotlib.pyplot as plt
# import datasets

# # Load TSLA dataset
# tesla = datasets.load_dataset('codesignal/tsla-historic-prices')
# tesla_df = pd.DataFrame(tesla['train'])

# # TODO: Convert the Date column to datetime type

# # TODO: Add new technical indicators to the DataFrame (Momentum, Daily Return, High-Low Difference)
# # Momentum_5: The change in the adjusted close price over the past 5 days
# # Daily_Return: The daily percentage change in the adjusted close price
# # High_Low_Diff: The difference between the highest and lowest prices of the day

# # TODO: Drop NaN values generated by the indicators

# # TODO: Select features and target for model training
# # The target will be the 'Adj Close' column

# # TODO: Split dataset into training and testing sets

# # TODO: Standardize the features

# # TODO: Train a Gradient Boosting Regressor model

# # TODO: Compute and visualize feature importance
# # Make sure to sort the importance values in descending order

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
import matplotlib.pyplot as plt
import datasets

# Load TSLA dataset
tesla = datasets.load_dataset('codesignal/tsla-historic-prices')
tesla_df = pd.DataFrame(tesla['train'])

# TODO: Convert the Date column to datetime type
tesla_df['Date'] = pd.to_datetime(tesla_df['Date'])

# TODO: Add new technical indicators to the DataFrame (Momentum, Daily Return, High-Low Difference)
# Momentum_5: The change in the adjusted close price over the past 5 days
tesla_df['Momentum_5'] = tesla_df['Adj Close'] - tesla_df['Adj Close'].shift(5)

# Daily_Return: The daily percentage change in the adjusted close price
tesla_df['Daily_Return'] = tesla_df['Adj Close'].pct_change()

# High_Low_Diff: The difference between the highest and lowest prices of the day
tesla_df['High_Low_Diff'] = tesla_df['High'] - tesla_df['Low']

# TODO: Drop NaN values generated by the indicators
tesla_df.dropna(inplace=True)

# TODO: Select features and target for model training
# The target will be the 'Adj Close' column
features = tesla_df[['Open', 'High', 'Low', 'Close', 'Volume', 'Momentum_5', 'Daily_Return', 'High_Low_Diff']].values
target = tesla_df['Adj Close'].values

# TODO: Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.25, random_state=42)

# TODO: Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# TODO: Train a Gradient Boosting Regressor model
model = GradientBoostingRegressor(random_state=42)
model.fit(X_train, y_train)

# TODO: Compute and visualize feature importance
# Make sure to sort the importance values in descending order
feature_importance = model.feature_importances_

# Create a DataFrame for better visualization
feature_names = ['Open', 'High', 'Low', 'Close', 'Volume', 'Momentum_5', 'Daily_Return', 'High_Low_Diff']
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Print feature importances
print("Feature importance:\n", feature_importance_df)

# Plotting feature importance
plt.figure(figsize=(10, 6))
plt.bar(range(len(feature_importance_df)), feature_importance_df['Importance'])
plt.title('Feature Importances')
plt.xlabel('Feature')
plt.ylabel('Importance')
plt.xticks(range(len(feature_importance_df)), feature_importance_df['Feature'], rotation=45)
plt.tight_layout()
plt.show()
